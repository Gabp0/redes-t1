#ifndef __ERROS__
#define __ERROS__

#include <cstdint>

using namespace std;

namespace errors
// algoritmos para deteccao e correcao de erros
{
    // lookup table para o CRC8
    const uint16_t POLYNOMIAL_8 = 0xE7; // 111100111 -> x^8 + x^7 + x^6 + x^5 + x^2 + x^1 + 1
    static uint8_t const LOOKUP_TABLE_8[] = {
        0x00, 0xE7, 0x29, 0xCE, 0x52, 0xB5, 0x7B, 0x9C, 0xA4, 0x43, 0x8D, 0x6A, 0xF6, 0x11, 0xDF, 0x38,
        0xAF, 0x48, 0x86, 0x61, 0xFD, 0x1A, 0xD4, 0x33, 0x0B, 0xEC, 0x22, 0xC5, 0x59, 0xBE, 0x70, 0x97,
        0xB9, 0x5E, 0x90, 0x77, 0xEB, 0x0C, 0xC2, 0x25, 0x1D, 0xFA, 0x34, 0xD3, 0x4F, 0xA8, 0x66, 0x81,
        0x16, 0xF1, 0x3F, 0xD8, 0x44, 0xA3, 0x6D, 0x8A, 0xB2, 0x55, 0x9B, 0x7C, 0xE0, 0x07, 0xC9, 0x2E,
        0x95, 0x72, 0xBC, 0x5B, 0xC7, 0x20, 0xEE, 0x09, 0x31, 0xD6, 0x18, 0xFF, 0x63, 0x84, 0x4A, 0xAD,
        0x3A, 0xDD, 0x13, 0xF4, 0x68, 0x8F, 0x41, 0xA6, 0x9E, 0x79, 0xB7, 0x50, 0xCC, 0x2B, 0xE5, 0x02,
        0x2C, 0xCB, 0x05, 0xE2, 0x7E, 0x99, 0x57, 0xB0, 0x88, 0x6F, 0xA1, 0x46, 0xDA, 0x3D, 0xF3, 0x14,
        0x83, 0x64, 0xAA, 0x4D, 0xD1, 0x36, 0xF8, 0x1F, 0x27, 0xC0, 0x0E, 0xE9, 0x75, 0x92, 0x5C, 0xBB,
        0xCD, 0x2A, 0xE4, 0x03, 0x9F, 0x78, 0xB6, 0x51, 0x69, 0x8E, 0x40, 0xA7, 0x3B, 0xDC, 0x12, 0xF5,
        0x62, 0x85, 0x4B, 0xAC, 0x30, 0xD7, 0x19, 0xFE, 0xC6, 0x21, 0xEF, 0x08, 0x94, 0x73, 0xBD, 0x5A,
        0x74, 0x93, 0x5D, 0xBA, 0x26, 0xC1, 0x0F, 0xE8, 0xD0, 0x37, 0xF9, 0x1E, 0x82, 0x65, 0xAB, 0x4C,
        0xDB, 0x3C, 0xF2, 0x15, 0x89, 0x6E, 0xA0, 0x47, 0x7F, 0x98, 0x56, 0xB1, 0x2D, 0xCA, 0x04, 0xE3,
        0x58, 0xBF, 0x71, 0x96, 0x0A, 0xED, 0x23, 0xC4, 0xFC, 0x1B, 0xD5, 0x32, 0xAE, 0x49, 0x87, 0x60,
        0xF7, 0x10, 0xDE, 0x39, 0xA5, 0x42, 0x8C, 0x6B, 0x53, 0xB4, 0x7A, 0x9D, 0x01, 0xE6, 0x28, 0xCF,
        0xE1, 0x06, 0xC8, 0x2F, 0xB3, 0x54, 0x9A, 0x7D, 0x45, 0xA2, 0x6C, 0x8B, 0x17, 0xF0, 0x3E, 0xD9,
        0x4E, 0xA9, 0x67, 0x80, 0x1C, 0xFB, 0x35, 0xD2, 0xEA, 0x0D, 0xC3, 0x24, 0xB8, 0x5F, 0x91, 0x76};

    // lookup table para o CRC16
    const uint16_t POLYNOMIAL_16 = 0x8F57; // 11000111101010111 -> x^16 + x^15 + x^11 + x^10 + x^9 + x^8 + x^6 + x^4 + x^2 + x^1 + 1
    static uint16_t const LOOKUP_TABLE_16[] = {
        0x0000, 0x8F57, 0x91F9, 0x1EAE, 0xACA5, 0x23F2, 0x3D5C, 0xB20B, 0xD61D, 0x594A, 0x47E4, 0xC8B3, 0x7AB8, 0xF5EF, 0xEB41, 0x6416,
        0x236D, 0xAC3A, 0xB294, 0x3DC3, 0x8FC8, 0x009F, 0x1E31, 0x9166, 0xF570, 0x7A27, 0x6489, 0xEBDE, 0x59D5, 0xD682, 0xC82C, 0x477B,
        0x46DA, 0xC98D, 0xD723, 0x5874, 0xEA7F, 0x6528, 0x7B86, 0xF4D1, 0x90C7, 0x1F90, 0x013E, 0x8E69, 0x3C62, 0xB335, 0xAD9B, 0x22CC,
        0x65B7, 0xEAE0, 0xF44E, 0x7B19, 0xC912, 0x4645, 0x58EB, 0xD7BC, 0xB3AA, 0x3CFD, 0x2253, 0xAD04, 0x1F0F, 0x9058, 0x8EF6, 0x01A1,
        0x8DB4, 0x02E3, 0x1C4D, 0x931A, 0x2111, 0xAE46, 0xB0E8, 0x3FBF, 0x5BA9, 0xD4FE, 0xCA50, 0x4507, 0xF70C, 0x785B, 0x66F5, 0xE9A2,
        0xAED9, 0x218E, 0x3F20, 0xB077, 0x027C, 0x8D2B, 0x9385, 0x1CD2, 0x78C4, 0xF793, 0xE93D, 0x666A, 0xD461, 0x5B36, 0x4598, 0xCACF,
        0xCB6E, 0x4439, 0x5A97, 0xD5C0, 0x67CB, 0xE89C, 0xF632, 0x7965, 0x1D73, 0x9224, 0x8C8A, 0x03DD, 0xB1D6, 0x3E81, 0x202F, 0xAF78,
        0xE803, 0x6754, 0x79FA, 0xF6AD, 0x44A6, 0xCBF1, 0xD55F, 0x5A08, 0x3E1E, 0xB149, 0xAFE7, 0x20B0, 0x92BB, 0x1DEC, 0x0342, 0x8C15,
        0x943F, 0x1B68, 0x05C6, 0x8A91, 0x389A, 0xB7CD, 0xA963, 0x2634, 0x4222, 0xCD75, 0xD3DB, 0x5C8C, 0xEE87, 0x61D0, 0x7F7E, 0xF029,
        0xB752, 0x3805, 0x26AB, 0xA9FC, 0x1BF7, 0x94A0, 0x8A0E, 0x0559, 0x614F, 0xEE18, 0xF0B6, 0x7FE1, 0xCDEA, 0x42BD, 0x5C13, 0xD344,
        0xD2E5, 0x5DB2, 0x431C, 0xCC4B, 0x7E40, 0xF117, 0xEFB9, 0x60EE, 0x04F8, 0x8BAF, 0x9501, 0x1A56, 0xA85D, 0x270A, 0x39A4, 0xB6F3,
        0xF188, 0x7EDF, 0x6071, 0xEF26, 0x5D2D, 0xD27A, 0xCCD4, 0x4383, 0x2795, 0xA8C2, 0xB66C, 0x393B, 0x8B30, 0x0467, 0x1AC9, 0x959E,
        0x198B, 0x96DC, 0x8872, 0x0725, 0xB52E, 0x3A79, 0x24D7, 0xAB80, 0xCF96, 0x40C1, 0x5E6F, 0xD138, 0x6333, 0xEC64, 0xF2CA, 0x7D9D,
        0x3AE6, 0xB5B1, 0xAB1F, 0x2448, 0x9643, 0x1914, 0x07BA, 0x88ED, 0xECFB, 0x63AC, 0x7D02, 0xF255, 0x405E, 0xCF09, 0xD1A7, 0x5EF0,
        0x5F51, 0xD006, 0xCEA8, 0x41FF, 0xF3F4, 0x7CA3, 0x620D, 0xED5A, 0x894C, 0x061B, 0x18B5, 0x97E2, 0x25E9, 0xAABE, 0xB410, 0x3B47,
        0x7C3C, 0xF36B, 0xEDC5, 0x6292, 0xD099, 0x5FCE, 0x4160, 0xCE37, 0xAA21, 0x2576, 0x3BD8, 0xB48F, 0x0684, 0x89D3, 0x977D, 0x182A};

    uint8_t checksum8(char *data, size_t size);
    uint16_t checksum16(char *data, size_t size);

    uint8_t crc8(char *data, size_t size);
    uint16_t crc16(char *data, size_t size);

    char *convolutionalCode(char *data, size_t size);
    char *viterbiDecoder(char *data, size_t size);
} // namespace erros

#endif
