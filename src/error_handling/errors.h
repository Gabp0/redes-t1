#ifndef __ERROS__
#define __ERROS__

#include <cstdint>

using namespace std;

namespace errors
// implementa o checksum para deteccao de erros
{
    const uint16_t POLYNOMIAL_8 = 0xF7; // 11110111 -> x^7 + x^6 + x^5 + x^4 + x^2 + x^1 + 1

    static unsigned char const LOOKUP_TABLE_8[] = {
        0x00, 0xF7, 0x19, 0xEE, 0x32, 0xC5, 0x2B, 0xDC, 0x64, 0x93, 0x7D, 0x8A, 0x56, 0xA1, 0x4F, 0xB8, 0xC8, 0x3F, 0xD1, 0x26, 0xFA, 0x0D, 0xE3, 0x14, 0xAC, 0x5B, 0xB5, 0x42, 0x9E, 0x69, 0x87, 0x70, 0x67, 0x90, 0x7E, 0x89, 0x55, 0xA2, 0x4C, 0xBB, 0x03, 0xF4, 0x1A, 0xED, 0x31, 0xC6, 0x28, 0xDF, 0xAF, 0x58, 0xB6, 0x41, 0x9D, 0x6A, 0x84, 0x73, 0xCB, 0x3C, 0xD2, 0x25, 0xF9, 0x0E, 0xE0, 0x17, 0xCE, 0x39, 0xD7, 0x20, 0xFC, 0x0B, 0xE5, 0x12, 0xAA, 0x5D, 0xB3, 0x44, 0x98, 0x6F, 0x81, 0x76, 0x06, 0xF1, 0x1F, 0xE8, 0x34, 0xC3, 0x2D, 0xDA, 0x62, 0x95, 0x7B, 0x8C, 0x50, 0xA7, 0x49, 0xBE, 0xA9, 0x5E, 0xB0, 0x47, 0x9B, 0x6C, 0x82, 0x75, 0xCD, 0x3A, 0xD4, 0x23, 0xFF, 0x08, 0xE6, 0x11, 0x61, 0x96, 0x78, 0x8F, 0x53, 0xA4, 0x4A, 0xBD, 0x05, 0xF2, 0x1C, 0xEB, 0x37, 0xC0, 0x2E, 0xD9, 0x6B, 0x9C, 0x72, 0x85, 0x59, 0xAE, 0x40, 0xB7, 0x0F, 0xF8, 0x16, 0xE1, 0x3D, 0xCA, 0x24, 0xD3, 0xA3, 0x54, 0xBA, 0x4D, 0x91, 0x66, 0x88, 0x7F, 0xC7, 0x30, 0xDE, 0x29, 0xF5, 0x02, 0xEC, 0x1B, 0x0C, 0xFB, 0x15, 0xE2, 0x3E, 0xC9, 0x27, 0xD0, 0x68, 0x9F, 0x71, 0x86, 0x5A, 0xAD, 0x43, 0xB4, 0xC4, 0x33, 0xDD, 0x2A, 0xF6, 0x01, 0xEF, 0x18, 0xA0, 0x57, 0xB9, 0x4E, 0x92, 0x65, 0x8B, 0x7C, 0xA5, 0x52, 0xBC, 0x4B, 0x97, 0x60, 0x8E, 0x79, 0xC1, 0x36, 0xD8, 0x2F, 0xF3, 0x04, 0xEA, 0x1D, 0x6D, 0x9A, 0x74, 0x83, 0x5F, 0xA8, 0x46, 0xB1, 0x09, 0xFE, 0x10, 0xE7, 0x3B, 0xCC, 0x22, 0xD5, 0xC2, 0x35, 0xDB, 0x2C, 0xF0, 0x07, 0xE9, 0x1E, 0xA6, 0x51, 0xBF, 0x48, 0x94, 0x63, 0x8D, 0x7A, 0x0A, 0xFD, 0x13, 0xE4, 0x38, 0xCF, 0x21, 0xD6, 0x6E, 0x99, 0x77, 0x80, 0x5C, 0xAB, 0x45, 0xB2}; // http://www.sunshine2k.de/coding/javascript/crc/crc_js.html

    const uint16_t POLYNOMIAL_16 = 0x4CEB; // 100110011101011 -> x^15 + x^12 + x^11 + x^8 + x^7 + x^6 + x^4 + x^2 + 1

    static unsigned char const LOOKUP_TABLE_16[] = {
        0x0000, 0x4CEB, 0x99D6, 0xD53D, 0x7F47, 0x33AC, 0xE691, 0xAA7A, 0xFE8E, 0xB265, 0x6758, 0x2BB3, 0x81C9, 0xCD22, 0x181F, 0x54F4,
        0xB1F7, 0xFD1C, 0x2821, 0x64CA, 0xCEB0, 0x825B, 0x5766, 0x1B8D, 0x4F79, 0x0392, 0xD6AF, 0x9A44, 0x303E, 0x7CD5, 0xA9E8, 0xE503,
        0x2F05, 0x63EE, 0xB6D3, 0xFA38, 0x5042, 0x1CA9, 0xC994, 0x857F, 0xD18B, 0x9D60, 0x485D, 0x04B6, 0xAECC, 0xE227, 0x371A, 0x7BF1,
        0x9EF2, 0xD219, 0x0724, 0x4BCF, 0xE1B5, 0xAD5E, 0x7863, 0x3488, 0x607C, 0x2C97, 0xF9AA, 0xB541, 0x1F3B, 0x53D0, 0x86ED, 0xCA06,
        0x5E0A, 0x12E1, 0xC7DC, 0x8B37, 0x214D, 0x6DA6, 0xB89B, 0xF470, 0xA084, 0xEC6F, 0x3952, 0x75B9, 0xDFC3, 0x9328, 0x4615, 0x0AFE,
        0xEFFD, 0xA316, 0x762B, 0x3AC0, 0x90BA, 0xDC51, 0x096C, 0x4587, 0x1173, 0x5D98, 0x88A5, 0xC44E, 0x6E34, 0x22DF, 0xF7E2, 0xBB09,
        0x710F, 0x3DE4, 0xE8D9, 0xA432, 0x0E48, 0x42A3, 0x979E, 0xDB75, 0x8F81, 0xC36A, 0x1657, 0x5ABC, 0xF0C6, 0xBC2D, 0x6910, 0x25FB,
        0xC0F8, 0x8C13, 0x592E, 0x15C5, 0xBFBF, 0xF354, 0x2669, 0x6A82, 0x3E76, 0x729D, 0xA7A0, 0xEB4B, 0x4131, 0x0DDA, 0xD8E7, 0x940C,
        0xBC14, 0xF0FF, 0x25C2, 0x6929, 0xC353, 0x8FB8, 0x5A85, 0x166E, 0x429A, 0x0E71, 0xDB4C, 0x97A7, 0x3DDD, 0x7136, 0xA40B, 0xE8E0,
        0x0DE3, 0x4108, 0x9435, 0xD8DE, 0x72A4, 0x3E4F, 0xEB72, 0xA799, 0xF36D, 0xBF86, 0x6ABB, 0x2650, 0x8C2A, 0xC0C1, 0x15FC, 0x5917,
        0x9311, 0xDFFA, 0x0AC7, 0x462C, 0xEC56, 0xA0BD, 0x7580, 0x396B, 0x6D9F, 0x2174, 0xF449, 0xB8A2, 0x12D8, 0x5E33, 0x8B0E, 0xC7E5,
        0x22E6, 0x6E0D, 0xBB30, 0xF7DB, 0x5DA1, 0x114A, 0xC477, 0x889C, 0xDC68, 0x9083, 0x45BE, 0x0955, 0xA32F, 0xEFC4, 0x3AF9, 0x7612,
        0xE21E, 0xAEF5, 0x7BC8, 0x3723, 0x9D59, 0xD1B2, 0x048F, 0x4864, 0x1C90, 0x507B, 0x8546, 0xC9AD, 0x63D7, 0x2F3C, 0xFA01, 0xB6EA,
        0x53E9, 0x1F02, 0xCA3F, 0x86D4, 0x2CAE, 0x6045, 0xB578, 0xF993, 0xAD67, 0xE18C, 0x34B1, 0x785A, 0xD220, 0x9ECB, 0x4BF6, 0x071D,
        0xCD1B, 0x81F0, 0x54CD, 0x1826, 0xB25C, 0xFEB7, 0x2B8A, 0x6761, 0x3395, 0x7F7E, 0xAA43, 0xE6A8, 0x4CD2, 0x0039, 0xD504, 0x99EF,
        0x7CEC, 0x3007, 0xE53A, 0xA9D1, 0x03AB, 0x4F40, 0x9A7D, 0xD696, 0x8262, 0xCE89, 0x1BB4, 0x575F, 0xFD25, 0xB1CE, 0x64F3, 0x2818};

    uint8_t
    checksum8(char *data, size_t size);
    uint16_t checksum16(char *data, size_t size);

    char *convolutionalCode(char *data, size_t size);
    char *viterbiDecoder(char *data, size_t size);

    uint8_t crc8(char *data, size_t size);
    uint8_t crc16(char *data, size_t size);
} // namespace erros

#endif
